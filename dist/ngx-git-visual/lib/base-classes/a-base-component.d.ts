import { ChangeDetectorRef, ElementRef, Injector } from '@angular/core';
import { ControlContainer, FormControl, FormGroup } from '@angular/forms';
import * as i0 from "@angular/core";
export declare abstract class BaseUiFormDirective {
    label: string | null;
    id: string | null;
    tooltip: string | null;
    disabled: boolean;
    isVisible: boolean;
    position: string | null;
    isRequired: boolean;
    classes: string[];
    style: object;
    placeholder: string;
    value: any;
    protected formControlName: string | null;
    protected elementRef: ElementRef | null;
    protected controlContainer: ControlContainer | null;
    protected changeDetectorRef: ChangeDetectorRef | null;
    get form(): FormGroup;
    get control(): FormControl;
    protected touched: boolean;
    constructor(injector: Injector);
    protected onChange: (value: any) => void;
    protected onTouched: () => void;
    protected onInit(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    writeValue(outsideValue: any): void;
    protected markAsTouched(): void;
    private getTokensFormDI;
    abstract updateValue(event: any, markAsTouched: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BaseUiFormDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BaseUiFormDirective, never, never, { "label": "label"; "id": "id"; "tooltip": "tooltip"; "isVisible": "isVisible"; "position": "position"; "isRequired": "isRequired"; "classes": "classes"; "style": "style"; "placeholder": "placeholder"; "value": "value"; }, {}, never>;
}
